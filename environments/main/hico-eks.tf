provider "aws" {
  region = "eu-west-2"
}

locals {
  //Grant additional userarns to access to the cluster
  map_users = [
    {
      userarn  = "arn:aws:iam::002193201352:user/circleci_devops"
      username = "circleci_devops"
      groups   = ["system:masters"]
    },
    {
      userarn  = "arn:aws:iam::002193201352:user/juan"
      username = "juan"
      groups   = ["system:masters"]
    },
    {
      userarn  = "arn:aws:iam::002193201352:user/luke.noble"
      username = "luke.noble"
      groups   = ["system:masters"]
    },
    {
      userarn  = "arn:aws:iam::002193201352:user/administrator"
      username = "administrator"
      groups   = ["system:masters"]
    },
    {
      userarn  = "arn:aws:iam::002193201352:user/dawn_urolime"
      username = "dawn_urolime"
      groups   = ["system:masters"]
    },
    {
      userarn  = "arn:aws:iam::002193201352:user/augustine_urolime"
      username = "augustine_urolime"
      groups   = ["system:masters"]
    }    
  ]
}

module "hico-test-dev" {
  source       = "../../eks"
  cluster_name = "hico-test-dev"
  instance_type        = "t2.micro"
  asg_min_capacity     = 1
  asg_desired_capacity = 1
  asg_max_capacity     = 3
  map_users            = local.map_users
}


# module "hico-test-staging" {
#  source               = "./eks"
#  cluster_name         = "hico-test-staging"
#  instance_type        = "t2.micro"
#  asg_min_capacity     = 1
#  asg_desired_capacity = 1
#  asg_max_capacity     = 4
#  map_users            = local.map_users
# }


#module "master" {
#  source               = "./eks"
#  cluster_name         = "hico-master"
#  instance_type        = "t3a.xlarge"
#  asg_min_capacity     = 1
#  asg_desired_capacity = 1
#  asg_max_capacity     = 2
#  map_users            = local.map_users
#}



//output "aws_account_id" {
//  value = module.develop.aws_account_id
//}

//output "cluster_endpoint" {
//  description = "Endpoint for EKS control plane."
//  value       = module.develop.cluster_endpoint
//}

//output "cluster_security_group_id" {
//  description = "Security group ids attached to the cluster control plane."
//  value       = module.develop.cluster_security_group_id
//}


//output "kubectl_config" {
//  description = "kubectl config as generated by the module."
//  value       = module.develop.kubectl_config
//}


//output "config_map_aws_auth" {
//  description = "A kubernetes configuration to authenticate to this EKS cluster."
//  value = module.develop.config_map_aws_auth
//}

output "autoscaler-for-the-CLUSTER" {
  value = "Install k8s dashboard & then cluster autoscaler with helm - https://github.com/terraform-aws-modules/terraform-aws-eks/blob/master/examples/irsa/README.md#verify"
}
